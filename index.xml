<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>libpasta</title>
    <link>https://libpasta.github.io/</link>
    <description>Recent content on libpasta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    
	<atom:link href="https://libpasta.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Overview</title>
      <link>https://libpasta.github.io/other-languages/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/other-languages/overview/</guid>
      <description>Our goal is for libpasta to be the clear choice for any developers requiring secure password storage. We target a number of languages, initially supported through the use of SWIG.
So far, this means we have simple bindings for C, Java, PHP, python, and Ruby.
The SWIG specification for libpasta reveals the simplicity of the API, and a few important caveats:
# in pasta.h #include &amp;lt;stdbool.h&amp;gt; extern char * hash_password(const char *password); extern bool verify_password(const char* hash, const char *password); extern void free_string(const char *); extern char * read_password(const char *prompt);  These bind to the functions exported by the libpasta-ffi crate.</description>
    </item>
    
    <item>
      <title>Algorithm Selection</title>
      <link>https://libpasta.github.io/technical-details/algorithm-choice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/technical-details/algorithm-choice/</guid>
      <description>Currently, we use XXX as the default algorithm in libpasta.</description>
    </item>
    
    <item>
      <title>What is libpasta?</title>
      <link>https://libpasta.github.io/introduction/what-is-libpasta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/introduction/what-is-libpasta/</guid>
      <description>Password breaches have become a regular occurance. See: Yahoo (twice), LinkedIn, Adobe, Ashley Madison, and a whole lot more.
Furthermore, with the exception of Yahoo who eventually migrated to bcrypt in 2013, the above examples doubles as a list of &amp;ldquo;how NOT to do password storage&amp;rdquo;: simple hashing, unsalted values, misuse of encryption, and failed password migration. (For more information on why these are bad, see our introduction to password hashing theory).</description>
    </item>
    
    <item>
      <title>Basic Usage</title>
      <link>https://libpasta.github.io/introduction/basic-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/introduction/basic-usage/</guid>
      <description>The following examples are for the core library written in Rust. See other languages for language bindings and examples. Where possible, the APIs exported by libpasta are identical to those used in the Rust library.
Password Hashes A common scenario is that a particular user has password, which a service will check on each login to authenticate the user.
externcratelibpasta; // We re-export the rpassword crate for CLI password input.</description>
    </item>
    
    <item>
      <title>C</title>
      <link>https://libpasta.github.io/other-languages/c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/other-languages/c/</guid>
      <description>We can use the FFI definitions output by Rust directly in C code. However, unlike with the SWIG bindings, we are required to manually free the strings after use, as in the following simple example.
### in pasta.h #include &amp;lt;stdbool.h&amp;gt; extern char * hash_password(const char *password); extern bool verify_password(const char* hash, const char *password); extern void free_string(const char *); extern char * read_password(const char *prompt);  #include &amp;quot;pasta.h&amp;quot; #include &amp;lt;stdio.h&amp;gt; int main(void) { char *hash, *password; hash = hash_password(&amp;quot;hello123&amp;quot;); password = read_password(&amp;quot;Please enter the password (hint: hello123):&amp;quot;); if (verify_password(hash, password)) { printf(&amp;quot;Correct password\n&amp;quot;); } else { printf(&amp;quot;Sorry, that is incorrect\n&amp;quot;); } free_string(hash); free_string(password); return 0; }  Which is compiled in the usual way:</description>
    </item>
    
    <item>
      <title>Java</title>
      <link>https://libpasta.github.io/other-languages/java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/other-languages/java/</guid>
      <description>SWIG generates a number of helper files for Java, and a JNI library for use. For convenience, we have packaged these in a .jar file, which can be compiled from scratch using the make install_java command.
Hence, we need the following files: libpasta.so, libpasta_jni.so, and `libpasta.jar. Then, the following is sufficient to use the pasta functions:
public class test { public static void main(String argv[]) { String hash = pasta.hash_password(&amp;quot;hello123&amp;quot;); String password = pasta.</description>
    </item>
    
    <item>
      <title>PHP</title>
      <link>https://libpasta.github.io/other-languages/php/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/other-languages/php/</guid>
      <description>For PHP, SWIG generates a pasta.so extension, which can be installed in the system directory (for example, /etc/php/php.ini), and must be enabled. SWIG also generates a pasta.php module file which loads the extension and defines the API for libpasta.
// In pasta.php &amp;lt;?php include(&amp;quot;pasta.php&amp;quot;); $password = $_POST[&amp;#39;password&amp;#39;]; $hash = pasta::hash_password(&amp;quot;hello123&amp;quot;); if (pasta::verify_password($hash, $password)) { echo &amp;quot;Correct password.&amp;quot;; } else { echo &amp;quot;Sorry, that is incorrect&amp;quot;; } ?&amp;gt;  &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;libpasta PHP example&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form action=&amp;quot;pasta_form.</description>
    </item>
    
    <item>
      <title>Password Migration</title>
      <link>https://libpasta.github.io/advanced/migration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/advanced/migration/</guid>
      <description>Lorem Ipsum</description>
    </item>
    
    <item>
      <title>Python</title>
      <link>https://libpasta.github.io/other-languages/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/other-languages/python/</guid>
      <description>Lorem Ipsum</description>
    </item>
    
    <item>
      <title>Ruby</title>
      <link>https://libpasta.github.io/other-languages/ruby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/other-languages/ruby/</guid>
      <description>Lorem Ipsum</description>
    </item>
    
    <item>
      <title>Serializing Hashes</title>
      <link>https://libpasta.github.io/technical-details/phc-string-format/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/technical-details/phc-string-format/</guid>
      <description>We use the PHC string format, as defined here, to format password hashes produced by libpasta.
These take the following format:
 $&amp;lt;id&amp;gt;[$&amp;lt;param&amp;gt;=&amp;lt;value&amp;gt;(,&amp;lt;param&amp;gt;=&amp;lt;value&amp;gt;)*][$&amp;lt;salt&amp;gt;[$&amp;lt;hash&amp;gt;]]  where:
 &amp;lt;id&amp;gt; is the symbolic name for the function &amp;lt;param&amp;gt; is a parameter name &amp;lt;value&amp;gt; is a parameter value &amp;lt;salt&amp;gt; is an encoding of the salt &amp;lt;hash&amp;gt; is an encoding of the hash output  The string is then the concatenation, in that order, of:</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://libpasta.github.io/introduction/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/introduction/installation/</guid>
      <description>libpasta is designed to be installed as a system library. Currently, this can be achieved by downloading the repository, compiling it, and moving the library to the system library, e.g /usr/lib.
git clone https://github.com/libpasta/libpasta/ # NOT ACTUALLY HERE YET cd pass # compiles the library make libpasta # installs the library to ${INSTALL_DIR} - defaults to /usr/lib make install  For developing Rust applications, we recommend using it as usual through cargo.</description>
    </item>
    
    <item>
      <title>Parameter Selection</title>
      <link>https://libpasta.github.io/advanced/tuning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/advanced/tuning/</guid>
      <description>Lorem Ipsum</description>
    </item>
    
    <item>
      <title>Password hashing theory</title>
      <link>https://libpasta.github.io/introduction/password-hashing-theory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/introduction/password-hashing-theory/</guid>
      <description>Why hash passwords? Let&amp;rsquo;s start with the most common use of passwords: user authentication.
The general setting is that an individual has a username and a password, e.g. username: alice and password: hunter2.
When Alice first registers on a website, a new account is created, and the password is stored in the database, so that Alice can prove she is indeed Alice
id | username | password | creation-date | .</description>
    </item>
    
  </channel>
</rss>