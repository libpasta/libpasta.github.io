<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>libpasta</title>
    <link>https://libpasta.github.io/</link>
    <description>Recent content on libpasta</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    
	<atom:link href="https://libpasta.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Algorithm Selection</title>
      <link>https://libpasta.github.io/technical-details/algorithm-choice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/technical-details/algorithm-choice/</guid>
      <description>Currently, we use XXX as the default algorithm in libpasta.</description>
    </item>
    
    <item>
      <title>What is libpasta?</title>
      <link>https://libpasta.github.io/introduction/what-is-libpasta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/introduction/what-is-libpasta/</guid>
      <description>Making Passwords Painless This library aims to be an all-in-one solution for password storage. In particular, we aim to provide:
 Easy-to-use password storage with sane defaults. Tools to provide parameter tuning for different use cases. Automatic migration of passwords to new algorithms. Cross-platform builds and cross-language bindings.  Secure by Default libpasta is ready to work at a production level straight out of the box. We hide any unnecessary decisions from the developer.</description>
    </item>
    
    <item>
      <title>Basic Usage</title>
      <link>https://libpasta.github.io/introduction/basic-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/introduction/basic-usage/</guid>
      <description>The following examples are for the core library written in Rust. See other languages for language bindings and examples. Where possible, the APIs exported by libpasta are identical to those used in the Rust library.
Password Hashes A common scenario is that a particular user has password, which a service will check on each login to authenticate the user.
externcratelibpasta; // We re-export the rpassword crate for CLI password input.</description>
    </item>
    
    <item>
      <title>C</title>
      <link>https://libpasta.github.io/other-languages/c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/other-languages/c/</guid>
      <description>Lorem Ipsum</description>
    </item>
    
    <item>
      <title>Java</title>
      <link>https://libpasta.github.io/other-languages/java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/other-languages/java/</guid>
      <description>Lorem Ipsum</description>
    </item>
    
    <item>
      <title>PHP</title>
      <link>https://libpasta.github.io/other-languages/php/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/other-languages/php/</guid>
      <description>Lorem Ipsum</description>
    </item>
    
    <item>
      <title>Password Migration</title>
      <link>https://libpasta.github.io/advanced/migration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/advanced/migration/</guid>
      <description>Lorem Ipsum</description>
    </item>
    
    <item>
      <title>Python</title>
      <link>https://libpasta.github.io/other-languages/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/other-languages/python/</guid>
      <description>Lorem Ipsum</description>
    </item>
    
    <item>
      <title>Ruby</title>
      <link>https://libpasta.github.io/other-languages/ruby/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/other-languages/ruby/</guid>
      <description>Lorem Ipsum</description>
    </item>
    
    <item>
      <title>Serializing Hashes</title>
      <link>https://libpasta.github.io/technical-details/phc-string-format/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/technical-details/phc-string-format/</guid>
      <description>We use the PHC string format, as defined here, to format password hashes produced by libpasta.
These take the following format:
 $&amp;lt;id&amp;gt;[$&amp;lt;param&amp;gt;=&amp;lt;value&amp;gt;(,&amp;lt;param&amp;gt;=&amp;lt;value&amp;gt;)*][$&amp;lt;salt&amp;gt;[$&amp;lt;hash&amp;gt;]]  where:
 &amp;lt;id&amp;gt; is the symbolic name for the function &amp;lt;param&amp;gt; is a parameter name &amp;lt;value&amp;gt; is a parameter value &amp;lt;salt&amp;gt; is an encoding of the salt &amp;lt;hash&amp;gt; is an encoding of the hash output  The string is then the concatenation, in that order, of:</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://libpasta.github.io/introduction/installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/introduction/installation/</guid>
      <description>libpasta is designed to be installed as a system library. Currently, this can be achieved by downloading the repository, compiling it, and moving the library to the system library, e.g /usr/lib.
git clone https://github.com/libpasta/libpasta/ # NOT ACTUALLY HERE YET cd pass # compiles the library make libpasta # installs the library to ${INSTALL_DIR} - defaults to /usr/lib make install  For developing Rust applications, we recommend using it as usual through cargo.</description>
    </item>
    
    <item>
      <title>Parameter Selection</title>
      <link>https://libpasta.github.io/advanced/tuning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/advanced/tuning/</guid>
      <description>Lorem Ipsum</description>
    </item>
    
    <item>
      <title>Password hashing theory</title>
      <link>https://libpasta.github.io/introduction/password-hashing-theory/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://libpasta.github.io/introduction/password-hashing-theory/</guid>
      <description>Why hash passwords? Starting off with the most common use of passwords: user authentication.
The general setting is that an individual has a username and a password, lets say username: alice and password: hunter2.
When Alice first registers on a website, a new account is created, and the password is stored in the database, so that Alice can prove she is indeed Alice
id | username | password | creation-date | .</description>
    </item>
    
  </channel>
</rss>